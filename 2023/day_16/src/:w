const PUZZLIE_INPUT: &str = include_str!("./input.txt");

fn main() {
    println!("puzzle one: {}", one(PUZZLIE_INPUT));
}

fn one(puzzle_input: &str) -> usize {
    let height = puzzle_input.lines().count();
    let width = puzzle_input.lines().next().unwrap().chars().count();
    let mut world: Vec<Vec<char>> = vec![Vec::with_capacity(height); width];
    for (y, line) in puzzle_input.lines().enumerate() {
        for (x, ch) in line.chars().enumerate() {
            world.get_mut(x).unwrap().insert(y, ch);
        }
    }
    let mut light_beams: Vec<(usize, usize, char)> = vec![(0, 0, 'R')];
    while light_beams.len() != 0 {
        let mut additional: Vec<(usize, usize, char)> = Vec::new();
        for idx in 0..light_beams.len() {
            let (x, y, direction) = light_beams[idx];

            let tile = world[*x][*y];
            match (&direction, tile) {
                ('U', '/') => {
                    *direction = 'R';
                }
                ('U', '-') => {
                    light_beams.push((*x, *y, 'L'));
                    light_beams.push((*x, *y, 'R'));
                }
                ('U', '\\') => {
                    *direction = 'L';
                }
                ('U', '/') => {
                    *direction = 'R';
                }
                // 'D' => todo!(),
                // 'L' => todo!(),
                // 'R' => todo!(),
                _ => todo!(),
            }
        }
    }
    0
}
